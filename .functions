#!/usr/bin/env bash

# Inspired by https://github.com/mathiasbynens/dotfiles/blob/main/.functions

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Create a ZIP archive of a folder
zipf () { zip -r "$1".zip "$1" ; }

# Extract most know archives with one command
extract () {
	if [ -f $1 ] ; then
    case $1 in
    	*.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
    	echo "'$1' is not a valid file"
    fi
}

# find all files containg passed arg in current folder
qfind () { find . -iname "*$1*" ; } 

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Set the volume to 0 (mute) and then lock the screen.
function afk() {
	osascript -e "set Volume 0";
	open -a ScreenSaverEngine;
}

# Create a python virtual enviroment in the current folder and then execute it
function pyvenv() {
	VENV='python39venv';
	python -m venv $VENV;
	source $VENV/bin/activate;
	$VENV/bin/python -m pip install --upgrade pip
	pip install wheel tavern;
}

# WORK PROJECTS/SHORCUT
function resky-compile() {
	mvn clean install -P local-env -f /Users/rik/dev/projects/sky-sso/ita-sso-resky/pom.xml;
}

function resky-test() {
	(cd /Users/rik/dev/projects/ita-sso-resky/automation-tests && pyvenv && exec ./run_tests.sh);
}

function resky-logs() {
	docker logs ita-sso-resky-webapp	
}

